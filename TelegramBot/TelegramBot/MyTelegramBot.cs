using System.Web;
using Newtonsoft.Json;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace TelegramBot;

class MyTelegramBot
{
    private readonly ITelegramBotClient _telegramBotClient;

    public MyTelegramBot(ITelegramBotClient telegramBotClient)
    {
        _telegramBotClient = telegramBotClient;
    }

    public MyTelegramBot main { get; set; }
    public float Temp { get; set; }

    string[] HelloArr = {"–ü—Ä–∏–≤–µ—Ç!", "–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç", "–ö—É", "ghbdtn", "–∫—É", "–¥–æ—Ä–æ—É", "–î–æ—Ä–æ—É"};
    string[] WhatsUpArr = {"–ö–∞–∫ –¥–µ–ª–∞?", "–∫–∞–∫ –¥–µ–ª–∞?", "–∫–∞–∫ –¥–µ–ª–∞"};
    string[] WeatherCity = {"–í–ª–∞–¥–∏–º–∏—Ä", "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ì–æ–ª–æ–≤–∏–Ω–æ", "–ë–æ–≥–æ–ª—é–±–æ–≤–æ", "–î—É–±–∞–π", "–ì—É—Å—å-–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π"};

    string nameofCity;
    float tempOfCity;

    public IReplyMarkup ButtonOnTGbot()
    {
        var tgButton = new ReplyKeyboardMarkup(new[]
        {
            new[]
            {
                new KeyboardButton("–ü—Ä–∏–≤–µ—Ç!"),
            },
            new[]
            {
                new KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?")
            },
            new[]
            {
                new KeyboardButton("–°–∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
            },
            new[]
            {
                new KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É\U0001F325"),
            }
        });
        tgButton.ResizeKeyboard = true;
        return tgButton;
    }

    internal async Task UpdateHandler(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
    {
        if (update.Type == Telegram.Bot.Types.Enums.UpdateType.Message)
        {
            var message = update.Message;

            Console.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message?.From?.FirstName} {message?.From?.LastName} –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message?.Text}");
            Console.WriteLine($"\tid –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message?.From?.Id}");

            var hashHelloArr = new HashSet<string>(HelloArr);
            var hashWhatsUpArr = new HashSet<string>(WhatsUpArr);
            var hashWeatherCity = new HashSet<string>(WeatherCity);

            await using var dataBase = new StreamWriter("E:\\DataBase.txt", true);
            await dataBase.WriteLineAsync(JsonConvert.SerializeObject(update));
            dataBase.Close();

            if (!string.IsNullOrEmpty(message?.Text) && hashHelloArr.Contains(message.Text))
            {
                await bot.SendTextMessageAsync(message.Chat.Id, $"–ü—Ä–∏–≤–µ—Ç {message.From?.FirstName}! üôÇ", cancellationToken: cancellationToken);
                return;
            }

            if (string.Equals(message?.Text, "/start", StringComparison.OrdinalIgnoreCase))
            {
                await _telegramBotClient.SendTextMessageAsync(message?.Chat.Id ?? 0, "–°–º–æ—Ç—Ä–∏ —á—Ç–æ —è —É–º–µ—é! :)", replyMarkup: ButtonOnTGbot(), cancellationToken: cancellationToken);
                return;
            }

            if (!string.IsNullOrEmpty(message?.Text) && hashWhatsUpArr.Contains(message.Text))
            {
                await bot.SendTextMessageAsync(message.Chat.Id, "–•–æ—Ä–æ—à–æ, —É —Ç–µ–±—è –∫–∞–∫?", cancellationToken: cancellationToken);
                return;
            }

            if (string.Equals(message?.Text, "/getimage", StringComparison.OrdinalIgnoreCase)
                || string.Equals(message?.Text, "–°–∫–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É", StringComparison.OrdinalIgnoreCase))
            {
                await _telegramBotClient.SendPhotoAsync(message?.Chat.Id ?? 0, "https://www.animationsource.org/sites_content/lion_king/img_screenshot/85441.jpg", "\U0001F605", cancellationToken: cancellationToken);
                return;
            }

            if (string.Equals(message?.Text, "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É\U0001F325", StringComparison.OrdinalIgnoreCase))
            {
                await _telegramBotClient.SendTextMessageAsync(message?.Chat.Id ?? 0, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–∫–∞–∑–∞–ª –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ: /cityWeather", cancellationToken: cancellationToken);
                return;
            }

            if (string.Equals(message?.Text, "/cityWeather", StringComparison.OrdinalIgnoreCase))
            {
                foreach (var city in WeatherCity)
                {
                    await _telegramBotClient.SendTextMessageAsync(message.Chat.Id, $"{city}\n", cancellationToken: cancellationToken);
                }

                return;
            }

            if (hashWeatherCity.Contains(message.Text))
            {
                nameofCity = message.Text;
                await Weather(nameofCity, cancellationToken);
                await _telegramBotClient.SendTextMessageAsync(message.Chat.Id, $"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {nameofCity}: {Math.Round(tempOfCity)} ¬∞C", cancellationToken: cancellationToken);
                return;
            }

            await bot.SendTextMessageAsync(message.Chat.Id, "–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ \U0001F914", cancellationToken: cancellationToken);
        }
    }

    internal Task ErrorHandler(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        Console.WriteLine(JsonConvert.SerializeObject(exception));
        return Task.CompletedTask;
    }

    private async Task Weather(string cityName, CancellationToken cancellationToken)
    {
        const string appid = "2351aaee5394613fc0d14424239de2bd";

        try
        {
            var url = $"https://api.openweathermap.org/data/2.5/weather?q={HttpUtility.UrlEncode(cityName)}&appid={HttpUtility.UrlEncode(appid)}";
            using var hc = new HttpClient();
            var response = await hc.GetStringAsync(url, cancellationToken);
            var myTelegramBot = JsonConvert.DeserializeObject<MyTelegramBot>(response);
            tempOfCity = myTelegramBot.main.Temp - 273;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ :(  {ex.Message}");
        }
    }
}